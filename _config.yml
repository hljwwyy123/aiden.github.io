title: Aiden的Blog # 站点标题
description: | # 头像背后的信息（html格式），<br/>代表换行
  山口百惠<br/>
  奶爸<br/>
  猫奴<br/>
  Moto GP<br/>
  <a href="https://github.com/hljwwyy123">
    <i class="fa-brands fa-github"></i>
  </a>
  <br/>
url: https://edison.fit # 你的域名，例如 https://wu-kan.github.io
baseurl: "" # 假如你的博客是建在某个目录下的，请在这里加上目录名，并且下面配置的所有链接里的`/assets`前也要加，即`/your_baseurl/assets`。这一项结尾不要有'/'。
defaults: # 将所有配置选项使用<https://jekyllrb.com/docs/configuration/front-matter-defaults/>功能进行配置
  - scope:
      path: "" # an empty string here means all files in the project
    values: # 以下配置项也可以在任意页面自定义
      jekyll-theme-WuK: # 我的主题的自定义样式都在这个命名空间
        default:
          body:
            theme-base: theme-base-07 # 可选的主题色包括08~0f，见 <https://github.com/poole/lanyon>
            layout-reverse: true # 开启后sidebar在右边，反之左边
            sidebar-overlay: true # 开启后正文不随sidebar移动而移动
          html_lang: zh # <https://www.w3school.com.cn/tags/html_ref_language_codes.asp>
          sidebar: # 此配置项下是一些关于侧边栏的配置
            disable: false # 是否不显示sidebar
            avatar: # 侧边栏显示的头像
              enable: true
              img: https://avatars.githubusercontent.com/u/8967002?v=4 # 头像的地址
            nav: # 导航部分的内容，你也可以自己增加文字、图标（来自fontawesome）和对应的链接
              - title: '<i class="fa-solid fa-home fa-fw"></i> 首页'
                href: /
              - title: '<i class="fa-solid fa-tags fa-fw"></i> 归档'
                href: /archive/
              - title: '<i class="fa-solid fa-comment fa-fw"></i> 留言'
                href: /comments/
            simple_jekyll_search: # 侧边栏的全站搜索
              enable: true
              full_text_search: false # 可能导致缓慢的搜索和加载
              append: | # 如果看不懂就不改
                <style>
                  #sidebar-search-input {
                    background: none;
                    outline: none 0;
                    border: 1px solid #e3e3e3;
                    border-radius: 4px;
                    padding: 12px 6px;
                    color: White;
                    width: 100%;
                  }
                  #sidebar-search-results-container {
                    overflow: hidden hidden;
                    max-height: 66.6vh;
                  }
                  #sidebar-search-results-container:hover {
                    overflow: auto auto;
                  }
                </style>
                <input
                  id="sidebar-search-input"
                  placeholder="搜索博文"
                />
                <ol
                  id="sidebar-search-results-container"
                ></ol>
                <script
                  src='https://cdn.jsdelivr.net/npm/simple-jekyll-search@1.9.1'
                  async='async'
                  onload='
                    SimpleJekyllSearch({
                      json: "/assets/simple-jekyll-search/search.json",
                      searchInput: document.getElementById("sidebar-search-input"),
                      resultsContainer: document.getElementById("sidebar-search-results-container"),
                      searchResultTemplate: `<li><a href="{url}">{title}</a></li>`,
                      noResultsText: `<p class="empty-search-result">没有找到相关博文~</p>`,
                      limit: 99,
                      fuzzy: true
                    })'
                ></script>
            jekyll-toc: # 侧边栏的目录插件，https://github.com/allejo/jekyll-toc
              enable: true
              prepend: | # 目录过长时自动折叠
                <style>
                  #toc {
                    overflow: hidden hidden;
                    max-height: 66.6vh;
                  }
                  #toc:hover{
                    overflow: auto auto;
                  }
                </style>
            append_to_sidebar:
              #- <script defer="defer" src="https://cdn.jsdelivr.net/gh/poole/lanyon@v1.1.0/public/js/script.min.js"></script> # 点击空白处而非按钮从而关闭侧边栏的插件，可选
              - | # 侧边栏使用主题色
                <style>
                  #sidebar-checkbox:checked ~ .sidebar-toggle,
                  .sidebar,
                  .sidebar-toggle:active {
                    background-color: var(--theme-base-color);
                  }
                </style>
              - | # 修复点击侧边栏按钮回到顶部的问题
                <style>
                  .sidebar-checkbox {
                    display: none;
                  }
                  .sidebar-toggle {
                    position: fixed;
                    background: none;
                  }
                </style>
              - | # 修复侧边栏特定情况下抖动的问题，感谢 [@AmachiInori](https://github.com/wu-kan/wu-kan.github.io/issues/11)
                <style>
                  .sidebar {
                    overflow: hidden;
                    min-height: 101%;
                  }
                  .sidebar:hover{
                    overflow-y: scroll; 
                  }
                </style>
              - | # 侧边栏头像效果
                <style>
                  .effect {
                    margin: 1rem;
                    perspective: 900px;
                  }
                  .effect-info {
                    text-align: center;
                    position: absolute;
                    top: 0;
                    width: 100%;
                    transform-style: preserve-3d;
                  }
                  .effect-img {
                    z-index: 11;
                    width: 100%;
                    height: 100%;
                    position: relative;
                    transition: all 0.5s ease-in-out;
                  }
                  .effect-img:before {
                    position: absolute;
                    display: block;
                  }
                  .effect-right_to_left .effect-img {
                    transform-origin: 0% 50%;
                  }
                  .effect-right_to_left:hover .effect-img {
                    transform: rotate3d(0, 1, 0, -180deg);
                  }
                </style>
              - | # 运行时间，可将倒数第三行的时间改成你自己的建站时间，格式仿照上面的；不需要的话可以把这一项都删掉
                <div>
                  <i class="fa-solid fa-cog fa-spin fa-fw"></i>
                  <span id="run_time_day">
                    <i class="fa-solid fa-spinner fa-pulse"></i>
                  </span>天
                  <span id="run_time_hour">
                    <i class="fa-solid fa-spinner fa-pulse"></i>
                  </span>时
                  <span id="run_time_minute">
                    <i class="fa-solid fa-spinner fa-pulse"></i>
                  </span>分
                  <span id="run_time_second">
                    <i class="fa-solid fa-spinner fa-pulse"></i>
                  </span>秒
                  <script>
                    setInterval(function (d,h,m,s,b) {
                      function setzero(i) {
                        return i < 10 ? "0" + i : i;
                      }
                      let BirthDay = new Date(b);
                      let today = new Date();
                      let timeold = (today.getTime() - BirthDay.getTime());
                      let sectimeold = timeold / 1000;
                      let secondsold = Math.floor(sectimeold);
                      let msPerDay = 24 * 60 * 60 * 1000;
                      let e_daysold = timeold / msPerDay;
                      let daysold = Math.floor(e_daysold);
                      let e_hrsold = (e_daysold - daysold) * 24;
                      let hrsold = Math.floor(e_hrsold);
                      let e_minsold = (e_hrsold - hrsold) * 60;
                      let minsold = Math.floor((e_hrsold - hrsold) * 60);
                      let seconds = Math.floor((e_minsold - minsold) * 60);
                      d.textContent = daysold;
                      h.textContent = setzero(hrsold);
                      m.textContent = setzero(minsold);
                      s.textContent = setzero(seconds);
                    },
                    1000,
                    document.getElementById("run_time_day"),
                    document.getElementById("run_time_hour"),
                    document.getElementById("run_time_minute"),
                    document.getElementById("run_time_second"),
                    "10/20/2022 11:03:56")// 这是我第一篇CSDN博客的时间
                  </script>
                </div>
              - | # 不蒜子页面统计，看不懂可不改
                <div>
                  <div>
                    <i class="fa-solid fa-eye fa-fw"></i>
                    <span id="busuanzi_value_page_pv">
                      <i class="fa-solid fa-spinner fa-pulse"></i>
                    </span>次
                  </div>
                  <div>
                    <i class="fa-solid fa-user-friends fa-fw"></i>
                    <span id="busuanzi_value_site_uv">
                      <i class="fa-solid fa-spinner fa-pulse"></i>
                    </span>人
                  </div>
                  <script
                    src='https://cdn.jsdelivr.net/npm/busuanzi@2.3/bsz.pure.mini.js'
                    async='async'
                  ></script>
                </div>
              - | # 万圣节 ghost
                <script type="x-shader/x-fragment" id="fragmentShader">
                  varying vec2 vUv;
                  uniform float u_ratio;
                  uniform float u_time;
                  uniform vec2 u_mouse;
                  uniform vec2 u_target_mouse;
                  uniform float u_face_expression;
                  uniform sampler2D u_touch_texture;

                  // --------------------------------
                  // Ghost face

                  float eyes(vec2 _st) {
                    _st.x = abs(_st.x);

                    _st.y += pow(_st.x, 2. - .4 * u_face_expression);
                    _st.x -= (.08 + .03 * u_face_expression);
                    _st.y *= .8;

                    _st *= 10.;

                    float d = length(_st);
                    d = pow(d, .4);

                    return clamp(1. - d, 0., 1.);
                  }

                  float mouth(vec2 _st) {
                    _st *= 13.;
                    _st.y *= .8;

                    _st.x /= (1. + 2. * u_face_expression);
                    _st.y *= (1. + .7 * u_face_expression);
                    _st.y -= pow(_st.x, 2.) * 2. * u_face_expression;

                    float d = length(_st);
                    d = pow(d, .7);

                    return clamp(1. - d, 0., 1.);
                  }

                  float face(vec2 _st) {
                    _st *= 3.5;

                    float eyes_shape = eyes(_st - vec2(0., .1));
                    float mouth_shape = mouth(_st - vec2(0., -.2));

                    float col;
                    col = mix(col, 1., eyes_shape);
                    col = mix(col, 1., mouth_shape);

                    return col;
                  }


                  // --------------------------------
                  // 2D noise

                  vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
                  vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
                  vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }
                  float snoise(vec2 v) {
                    const vec4 C = vec4(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);
                    vec2 i  = floor(v + dot(v, C.yy) );
                    vec2 x0 = v -   i + dot(i, C.xx);
                    vec2 i1;
                    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
                    vec4 x12 = x0.xyxy + C.xxzz;
                    x12.xy -= i1;
                    i = mod289(i);
                    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));
                    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
                    m = m*m ;
                    m = m*m ;
                    vec3 x = 2.0 * fract(p * C.www) - 1.0;
                    vec3 h = abs(x) - 0.5;
                    vec3 ox = floor(x + 0.5);
                    vec3 a0 = x - ox;
                    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);
                    vec3 g;
                    g.x  = a0.x  * x0.x  + h.x  * x0.y;
                    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
                    return 130.0 * dot(m, g);
                  }

                  void main() {
                    vec2 st = vUv;

                    vec2 mouse = st - u_mouse.xy;
                    mouse.x *= u_ratio;
                    vec2 mouse_target = st - u_target_mouse.xy;
                    mouse_target.x *= u_ratio;

                    // Texture we create and update in JS => bas shape
                    float touch = texture2D(u_touch_texture, st).r;

                    // Add noise to the base shape
                    vec2 noise_pos = vec2(st * 6.);
                    float noise = snoise(noise_pos + vec2(0., u_time)) * .25 + .25;
                    noise += snoise(noise_pos) * .25 + .3;
                    touch *= noise;

                    // Add face
                    touch -= 1.2 * face(mouse - .1 * (mouse - mouse_target));

                    // Apply color scheme
                    vec3 color = mix(vec3(1, 1, 1), vec3(1, .2, 0.18), smoothstep(.003, .3, touch));

                    gl_FragColor = vec4(color, 1.);
                  }

                </script>


                <script type="x-shader/x-vertex" id="vertexShader">

                  varying vec2 vUv;

                  void main() {
                    vUv = uv;
                    gl_Position = vec4(position, 1.);
                  }

                </script>

                <script type="module">
                  const canvasDom = document.createElement("div");
                  canvasDom.classList.add("viz");
                  canvasDom.style.position = "absolute";
                  canvasDom.style.top = 0;
                  canvasDom.style.left = 0;
                  canvasDom.style.zIndex = 1;
                  document.querySelector(".wrap").style.zIndex = 2;
                  document.body.append(canvasDom);
                  import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.min.js';
                  
                    const viewportHeight = document.documentElement.scrollHeight
                    const windowInnerHeight = window.innerHeight;

                    let config = {
                      dotsNumber: 11,
                      dotsBaseRadius: 160,
                      tailSpring: .35,
                      tailGravity: 9.8,
                      tailGravityBonds: [0.1, 5],
                      tailFriction: .5,
                      faceExpression: 0,
                      catchingSpeed: 0.1,
                    };

                    class Viz {

                      constructor() {
                        this.renderer = new THREE.WebGLRenderer({});
                        this.container = document.getElementsByClassName('viz')[0];
                        this.container.appendChild(this.renderer.domElement);
                        this.camera = new THREE.OrthographicCamera(
                          -.5 * window.innerWidth,
                          .5 * window.innerWidth,
                          .5 * viewportHeight,
                          -.5 * viewportHeight,
                          0.1,
                          1,
                        );
                        this.camera.position.set(0, 0, 1);

                        this.clock = new THREE.Clock();

                        this.scene = new THREE.Scene();

                        this.touchPoint = new THREE.Vector2(.5, .65);
                        this.targetTouchPoint = new THREE.Vector2(.5, .65);
                        this.touchCanvasPoint = [this.touchPoint.x * window.innerWidth, (1 - this.touchPoint.y) * viewportHeight];
                        this.isMoving = false;

                        this.touchCanvas = document.createElement('canvas');
                        this.touchCanvasCtx = this.touchCanvas.getContext('2d');
                        this.touchTexture = new THREE.CanvasTexture(this.touchCanvas);
                        this.touchTrail = new Array(config.dotsNumber);
                        for (let i = 0; i < config.dotsNumber; i++) {
                          this.touchTrail[i] = {
                            x: this.touchCanvasPoint[0],
                            y: this.touchCanvasPoint[1],
                            vx: 0,
                            vy: 0,
                            intensity: i ? .6 * (config.dotsNumber - i) / config.dotsNumber : .9,
                            r: config.dotsBaseRadius * (1 + Math.pow(i / config.dotsNumber, .5))
                          }
                        }

                        this.material = new THREE.ShaderMaterial({
                          uniforms: {
                            u_touch_texture: {
                              type: 't',
                              value: this.touchTexture
                            },
                            u_mouse: {
                              type: 'v2',
                              value: new THREE.Vector2(0, 0)
                            },
                            u_target_mouse: {
                              type: 'v2',
                              value: new THREE.Vector2(0, 0)
                            },
                            u_resolution: {
                              type: 'v2',
                              value: new THREE.Vector2(0, 0)
                            },
                            u_time: {
                              type: 'f',
                              value: 0
                            },
                            u_face_expression: {
                              type: 'f',
                              value: config.faceExpression
                            },
                            u_ratio: {
                              type: 'f',
                              value: window.innerWidth / viewportHeight
                            },
                          },
                          vertexShader: document.getElementById('vertexShader').textContent,
                          fragmentShader: document.getElementById('fragmentShader').textContent
                        });

                        const planeGeometry = new THREE.PlaneBufferGeometry(2, 2);
                        this.scene.add(new THREE.Mesh(planeGeometry, this.material));


                        this.addCanvasEvents();
                      }

                      addCanvasEvents() {
                        const _this = this;

                        let movingTimer;
                        let movingTimeout = function () {
                          _this.isMoving = false;
                        };
                        movingTimer = setTimeout(movingTimeout, 300);

                        window.addEventListener('mousemove', (e) => {
                          updateMousePosition(e.clientX, e.clientY);
                        });
                        window.addEventListener('touchmove', (e) => {
                          updateMousePosition(e.targetTouches[0].pageX, e.targetTouches[0].pageY);
                        });

                        function updateMousePosition(eX, eY) {
                          if (_this.isMoving === false) {
                            _this.isMoving = true;
                          }
                          clearTimeout(movingTimer);
                          movingTimer = setTimeout(movingTimeout, 300);

                          _this.targetTouchPoint.x = eX / window.innerWidth;
                          _this.targetTouchPoint.y = 1.1 - Math.max(eY / viewportHeight, .2);
                        }
                      }

                      updateTrail() {
                        this.touchCanvasCtx.fillStyle = 'black';
                        this.touchCanvasCtx.fillRect(0, 0, this.touchCanvas.width, viewportHeight);

                        this.touchTrail.forEach((p, pIdx) => {
                          if (pIdx === 0) {
                            p.x = this.touchCanvasPoint[0];
                            p.y = this.touchCanvasPoint[1];
                          } else {
                            p.vx += (this.touchTrail[pIdx - 1].x - p.x) * config.tailSpring;
                            p.vx *= config.tailFriction;

                            p.vy += (this.touchTrail[pIdx - 1].y - p.y) * config.tailSpring;
                            p.vy += config.tailGravity;
                            p.vy *= config.tailFriction;

                            p.x += p.vx;
                            p.y += p.vy;
                          }

                          const grd = this.touchCanvasCtx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.r);
                          grd.addColorStop(0, 'rgba(244, 67, 54, ' + p.intensity + ')');
                          grd.addColorStop(1, 'rgba(0,0,0, 0)');
                          // grd.addColorStop(0, 'rgba(255, 255, 255, ' + p.intensity + ')');
                          // grd.addColorStop(1, 'rgba(255, 255, 255, 0)');

                          this.touchCanvasCtx.beginPath();
                          this.touchCanvasCtx.fillStyle = grd;
                          this.touchCanvasCtx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
                          this.touchCanvasCtx.fill();
                        });

                        this.touchTexture.needsUpdate = true;
                      }

                      render() {
                        this.touchPoint.x += (this.targetTouchPoint.x - this.touchPoint.x) * config.catchingSpeed;
                        this.touchPoint.y += (this.targetTouchPoint.y - this.touchPoint.y) * config.catchingSpeed;
                        this.touchCanvasPoint = [this.touchPoint.x * window.innerWidth, (1 - this.touchPoint.y) * viewportHeight];

                        const time = this.clock.getElapsedTime();

                        if (this.isMoving) {
                          config.faceExpression -= .05;
                          config.faceExpression = Math.max(config.faceExpression, 0);
                          config.tailGravity -= .1;
                          config.tailGravity = Math.max(config.tailGravity, config.tailGravityBonds[0]);
                        } else {
                          config.faceExpression += .01;
                          config.faceExpression = Math.min(config.faceExpression, 1);
                          config.tailGravity += .1;
                          config.tailGravity = Math.min(config.tailGravity, config.tailGravityBonds[1]);
                        }
                        config.tailGravity += .12 * Math.sin(3 * time);

                        this.material.uniforms.u_face_expression.value = config.faceExpression;

                        this.updateTrail();
                        this.material.uniforms.u_touch_texture.value = this.touchTexture;

                        this.material.uniforms.u_time.value = time;
                        this.material.uniforms.u_mouse.value = new THREE.Vector2(this.touchPoint.x, this.touchPoint.y);
                        this.material.uniforms.u_target_mouse.value = new THREE.Vector2(this.targetTouchPoint.x, this.targetTouchPoint.y);
                        this.renderer.render(this.scene, this.camera);
                      }

                      loop() {
                        this.render();
                        requestAnimationFrame(this.loop.bind(this));
                      }

                      updateSize() {
                        config.tailGravityBonds = [5, 10];
                        this.touchCanvas.width = window.innerWidth;
                        this.touchCanvas.height = viewportHeight;
                        this.camera.left = -.5 * window.innerWidth;
                        this.camera.right = .5 * window.innerWidth;
                        this.camera.top = .5 * viewportHeight;
                        this.camera.bottom = -.5 * viewportHeight;
                        this.camera.aspect = window.innerWidth / viewportHeight;
                        this.camera.updateProjectionMatrix();
                        this.material.uniforms.u_ratio.value = window.innerWidth / document.documentElement.scrollHeight;
                        this.material.uniforms.u_resolution.value = new THREE.Vector2(window.innerWidth, document.documentElement.scrollHeight);
                        setTimeout(() => {
                          console.log(document.documentElement.scrollHeight)
                          this.renderer.setSize(window.innerWidth, document.documentElement.scrollHeight );
                          this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
                        }, 0);
                      }
                    }

                    const viz = new Viz();

                    viz.updateSize();
                    window.addEventListener('resize', () => viz.updateSize());

                    viz.loop();
                </script>
            wordcount: # 全站字数统计
              enable: true # 本地调试时建议关闭，非常影响站点生成速度（所需时间与博文数量的平方成正比）
              prepend: <i class="fa-solid fa-user-edit fa-fw"></i>
              kilo: 千
              unit: 字
          append_to_head: # 通过内嵌html的方式引入并定制插件，删改前确定知道自己在做什么。定制插件的方式可以参考这篇文章 <https://wu-kan.cn/_posts/2019-01-18-基于Jekyll搭建个人博客/>
            - | # jsdelivr 防挂脚本，来自 https://github.com/PipecraftNet/jsdelivr-auto-fallback/blob/0.2.2/index.min.js
              <script>
                (n=>{"use strict";let r,s,e;const l=["cdn.jsdelivr.net","fastly.jsdelivr.net","gcore.jsdelivr.net","cdn.zenless.top","testingcf.jsdelivr.net","test1.jsdelivr.net"],t="//",a=l[0],i=Date.now(),o=2e3,c="jsdelivr-auto-fallback",f="/gh/PipecraftNet/jsdelivr-auto-fallback@main/empty.css?",d=e=>e&&e.includes(t+a),m=e=>e.replace(t+a,t+r),u=window.setTimeout,v=n.querySelectorAll.bind(n),g=()=>{let e,t;for(e of v('link[rel="stylesheet"]'))t=e.href,d(t)&&!t.includes(f)&&(e.href=m(t));for(e of v("script"))if(t=e.src,d(t)){const r=n.createElement("script");r.src=m(t),e.defer=!0,e.src="",e.before(r),e.remove()}for(e of v("img"))t=e.src,d(t)&&(e.src="",e.src=m(t));for(e of v("*[style]"))t=e.getAttribute("style"),d(t)&&e.setAttribute("style",m(t));for(e of v("style"))t=e.innerHTML,d(t)&&(e.innerHTML=m(t))},y=()=>{!e&&s&&r&&(console.warn(a+" is not available. Use "+r),e=!0,u(g,0),u(g,20),setInterval(g,500))},b=(()=>{try{return Object.assign({},JSON.parse(localStorage.getItem(c)||"{}"))}catch{return{}}})();var h=()=>{b.time=i,b.failed=!1,b.fastNode=null;for(const t of l)((e,t)=>{let r;const s=n.createElement("link"),l=e=>{r&&(clearTimeout(r),r=0,e||(s.href="data:text/plain;base64,"),s.remove(),t(e))};r=u(l,o),s.addEventListener("error",()=>l(!1)),s.addEventListener("load",()=>l(!0)),s.rel="stylesheet",s.text="text/css",s.href=e+f+i,n.head.insertAdjacentElement("afterbegin",s)})("https://"+t,e=>{e||t!==a||(s=!0,b.failed=!0),e&&!r&&(r=t),e&&!b.fastNode&&(b.fastNode=t),y()});u(()=>{s&&!r&&(r=l[1],y()),localStorage.setItem(c,JSON.stringify(b))},o+100)};b.time&&i-b.time<36e5&&b.failed&&b.fastNode?(s=!0,r=b.fastNode,y(),u(h,1e3)):h()})(document);
              </script>
            - | # 自定义主题色，可对应 <https://www.runoob.com/cssref/css-colornames.html> 挑选
              <style>
                .theme-base-07 {
                  --theme-base-color: LightGray;
                }
              </style>
            - | # 一些页面优化标签，看不懂可跳过
              <meta
                name="viewport"
                content="width=device-width,minimum-scale=1,initial-scale=1"
              />
              <meta
                http-equiv="content-type"
                content="text/html; charset=utf-8"
              />
              <link
                rel="alternate"
                href="/feed.xml"
                title="RSS"
                type="application/rss+xml"
              />
            - | # 网站小图标，可换成你自己的图片，改href中的部分即可
              <link
                rel="apple-touch-icon-precomposed"
                href="https://avatars.githubusercontent.com/u/8967002?s=320"
              />
              <link
                rel="shortcut
                icon"
                href="https://avatars.githubusercontent.com/u/8967002?s=40&v=4"
              />
            - | # 来自lanyon的页面样式，不要改
              <link
                rel="stylesheet"
                href="https://cdn.jsdelivr.net/combine/gh/poole/lanyon@v1.1.0/public/css/poole.min.css,gh/poole/lanyon@v1.1.0/public/css/lanyon.min.css,gh/poole/lanyon@v1.1.0/public/css/syntax.min.css"
              />
            - | # fontawesome图标；标题和引用之前插一个图标
              <link
                rel="stylesheet"
                href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.1.1/css/all.min.css"
              />
            - | # 侧边栏放缩修正
              <style>
                .wrap {
                  transition-property: width,background-size,transform;
                  transition-duration: .3s;
                  transition-timing-function: ease-in-out;
                  display: inline-block;
                }
                @media screen and (min-width: 28rem) {
                  .sidebar-overlay #sidebar-checkbox:checked ~ .wrap {
                    width: calc(100% - 14rem);
                    transform: translateX(14rem);
                  }
                  .layout-reverse.sidebar-overlay #sidebar-checkbox:checked ~ .wrap {
                    transform: translateX(0);
                  }
                }
              </style>
            - | # <https://zenozeng.github.io/fonts.css/>，跨平台中文字体解决方案
              <link
                rel="stylesheet"
                href="https://cdn.jsdelivr.net/npm/@fontsource/courier-prime@4.5.7/index.min.css"
              />
              <link
                rel="stylesheet"
                href="https://cdn.jsdelivr.net/npm/@fontsource/noto-serif-tc@4.5.10/500.min.css"
              />
              <link
                rel="stylesheet"
                href="https://cdn.jsdelivr.net/npm/@fontsource/noto-serif-sc@4.5.10/chinese-simplified-500.min.css"
              />
              <style>
                .sidebar, html, h1, h2, h3, h4, h5, h6, code, pre {
                  font-family: 'Chinese Quote', 'Segoe UI', Roboto, RobotoNum, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif
                }
                body {font-weight: 300;font-size: 16px;word-break: break-word;line-height: 1.74;}
                input::-webkit-input-placeholder { /* Edge */
                  color: #e3e3e3;
                }

                input:-ms-input-placeholder { /* Internet Explorer 10-11 */
                  color: #e3e3e3;
                }

                input::placeholder {
                  color: #e3e3e3;
                }
              </style>
            - | # 修复行内图片默认样式
              <style>
                img {
                  display: inline-block;
                  margin: 0;
                }
              </style>
            - | # 自定义滚动条，仅对Chrome系浏览器生效
              <style>
                ::-webkit-scrollbar {
                  width: 3px;
                  height: 3px;
                }
                ::-webkit-scrollbar-thumb {
                  background-color: Gray;
                }
              </style>
            - | # 防止代码块过长
              <style>
                @media only screen {
                  pre {
                    white-space: pre;
                    max-height: 66.6vh;
                    padding: 0 1rem;
                    overflow: hidden hidden;
                  }
                  pre:hover {
                    overflow: auto auto;
                  }
                }
              </style>
            - | # 链接样式修正
              <style>
                .container a,
                .related-posts li a:hover {
                  color: inherit;
                  text-decoration: none;
                  border-bottom: 1px solid var(--theme-base-color);
                }
              </style>
        page:
          title: # 为每个页面自动生成一个 H1 title
            enable: true
          prepend:
            - | # 标题和引用前插一个图标
              <style>
                h1::before,
                h2::before,
                h3::before,
                h4::before,
                h5::before,
                h6::before,
                blockquote::before {
                  font-family: "Font Awesome 6 Free";
                  font-weight: bold;
                  font-size: smaller;
                  margin-right: .5rem;
                  content: "\f292";
                }
                blockquote::before { content: "\f10d"; }
              </style>
            - | # 选中字体颜色
              <style>
                ::selection {
                  color: White;
                  background: Black;
                }
              </style>
            - | # 调整标题样式
              <style>
                h1, h2, h3, h4, h5, h6 {
                  margin: 2rem 0rem 1rem 0rem;
                }
              </style>
            - | # 表格样式美化
              <style>
                td,
                th {
                  padding: 0px;
                  border: 0px;
                }
                table {
                  border: 0px;
                }
                table tbody {
                  display: block;
                  overflow: scroll;
                }
                table thead,
                tbody tr {
                  display: table;
                  table-layout: fixed;
                  width: 100%;
                }
              </style>
            - | # 列表项增加行距
              <style>
                .content li {
                  margin: .25rem;
                }
              </style>
            - | # 首行缩进2字符
              <style>
                p {
                  text-indent: 2rem;
                }
                p img {
                  max-width: calc(100% - 4rem);
                }
              </style>
            - | # 增加宽屏下的显示内容
              <style>
                .container {
                  min-width: 66.6%;
                  min-height: 100vh;
                }
                @media only print {
                  .container {
                    min-width: 100%;
                  }
                }
              </style>
            - |
              <style>
                .container.content {
                  padding: 2rem;
                }
              </style>
          plugin:
            - smart_include:
                enable: true
                key: $
              append:
                | # 对KaTeX过长公式渲染超出页面的修正，感谢[@AmachiInori](https://github.com/wu-kan/wu-kan.github.io/issues/13)
                <link
                  rel="stylesheet"
                  href="https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css"
                />
                <style>
                  .katex-display>.katex {
                    white-space: normal;
                  }
                </style>
                <script
                  src="https://cdn.jsdelivr.net/combine/npm/katex@0.16.0/dist/katex.min.js,npm/katex@0.16.0/dist/contrib/auto-render.min.js"
                  async="async"
                  onload='renderMathInElement(document.body, { delimiters: [{left: "$$", right: "$$", display: true}, { left: "$", right: "$", display: false }, {left: "\\(", right: "\\)", display: false}, {left: "\\[", right: "\\]", display: true}]})'
                ></script>
            - smart_include:
                enable: true
                key: language-vega-lite
              append: |
                <style>
                  pre.language-vega-lite,
                  code.language-vega-lite {
                    display: none;
                  }
                </style>
                <script
                  src="https://cdn.jsdelivr.net/combine/npm/vega@5.22.1,npm/vega-lite@5.2.0,npm/vega-embed@6.21.0"
                  async="async"
                  onload='
                    for(let x of document.getElementsByClassName("language-vega-lite"))
                      if(x.nodeName=="CODE")
                      {
                        let m = document.createElement("div");
                        x.parentNode.insertAdjacentElement("beforebegin", m);
                        vegaEmbed(m, JSON.parse(x.textContent));
                      }'
                ></script>
            - smart_include:
                enable: true
                key: language-mermaid
              append: |
                <style>
                  pre.language-mermaid,
                  code.language-mermaid {
                    display: none;
                  }
                  @media only screen {
                    .mermaid {
                      overflow: hidden hidden;
                      max-width: 100%;
                      max-height: 66.6vh;
                    }
                    .mermaid {
                      overflow: auto auto;
                    }
                  }
                </style>
                <script
                  src="https://cdn.jsdelivr.net/npm/mermaid@9.1.2/dist/mermaid.min.js"
                  async="async"
                  onload='
                    for(let x of document.getElementsByClassName("language-mermaid"))
                      if(x.nodeName=="CODE")
                      {
                        let m = document.createElement("div");
                        m.classList.add("mermaid");
                        m.textContent = x.textContent;
                        x.parentNode.insertAdjacentElement("beforebegin", m);
                      }'
                ></script>
            - smart_include:
                enable: false
              append: | # 引入live2d看板娘！不需要可以把这一项都删掉
                <link
                  rel="stylesheet"
                  href="https://cdn.jsdelivr.net/gh/Dreamer-Paul/Pio@2.4/static/pio.min.css"
                />
                <style>
                  @media only print {
                    .pio-container {
                      display: none;
                    }
                  }
                </style>
                <script
                  async="async"
                  src="https://cdn.jsdelivr.net/combine/gh/Dreamer-Paul/Pio@2.4/static/l2d.min.js,gh/Dreamer-Paul/Pio@2.4/static/pio.min.js"
                  onload='
                    let pio_container = document.createElement("div");
                    pio_container.classList.add("pio-container");
                    pio_container.classList.add("right");
                    pio_container.style.bottom = "-2rem";
                    pio_container.style.zIndex = "1";
                    document.body.insertAdjacentElement("beforeend", pio_container);
                    let pio_action = document.createElement("div");
                    pio_action.classList.add("pio-action");
                    pio_container.insertAdjacentElement("beforeend", pio_action);
                    let pio_canvas = document.createElement("canvas");
                    pio_canvas.id = "pio";
                    pio_canvas.style.width = "14rem";
                    pio_canvas.width = "600";
                    pio_canvas.height = "800";
                    pio_container.insertAdjacentElement("beforeend", pio_canvas);
                    let pio = new Paul_Pio({
                      "mode": "fixed",
                      "hidden": true,
                      "night": "for(let i=7; i<16; ++i) if(document.body.classList.contains(`theme-base-0`+i.toString(16))) { document.body.classList.remove(`theme-base-0`+i.toString(16)); document.body.classList.add(`theme-base-0`+((i-6)%9+7).toString(16)); break; }",
                      "content": {
                        "skin": ["要换成我的朋友吗？", "让她放个假吧~"],
                        "hidden": true,
                        "custom": [{
                          "selector": "a",
                          "type": "link",
                        }, {
                          "selector": ".sidebar-toggle",
                          "text": "打开侧边栏叭~"
                        }, {
                          "selector": ".effect-info",
                          "text": "哇，你发现了什么！"
                        }, {
                          "selector": "#sidebar-search-input",
                          "text": "想搜索什么呢？很多干货哦！"
                        }, {
                          "selector": "#toc",
                          "text": "这是目录~"
                        }, {
                          "selector": ".page-title",
                          "text": "这是标题~"
                        }]
                      },
                      "model": [
                        "https:\/\/cdn.jsdelivr.net/gh/xiaoski/live2d_models_collection/uiharu/uiharu.model.json",
                        "https:\/\/cdn.jsdelivr.net/gh/xiaoski/live2d_models_collection/Kobayaxi/Kobayaxi.model.json",
                        "https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/xiaomai/xiaomai.model.json",
                        "https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/33/model.2018.bls-winter.json",
                        "https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/platelet-2/model.json",
                        "https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/mashiro/seifuku.model.json",
                        "https:\/\/cdn.jsdelivr.net/gh/imuncle/live2d/model/Violet/14.json",
                        "https:\/\/cdn.jsdelivr.net/gh/xiaoski/live2d_models_collection/mikoto/mikoto.model.json",
                        ]
                    });'
                ></script>
        post:
          date: # 显示博文时间
            enable: true
            prepend: <i class="fa-solid fa-calendar-day fa-fw"></i>
          wordcount: # 统计全文字数
            enable: true
            prepend: <i class="fa-solid fa-file-word fa-fw"></i>
            unit: 字
          readtime: # 计算文章阅读时间
            enable: true
            prepend: <i class="fa-solid fa-clock fa-fw"></i>
            unit: 分
            divided_by: 300 # 正常人的阅读速度大概每分钟三百个字
          copyright:
            | # 我的文章使用最宽松的知识共享协议：署名 4.0 国际 (CC BY 4.0)。您可以自由地：共享 — 在任何媒介以任何形式复制、发行本作品；演绎 — 修改、转换或以本作品为基础进行创作；在任何用途下，甚至商业目的。只要你遵守许可协议条款，许可人就无法收回你的这些权利。惟须遵守下列条件：署名 — 您必须给出适当的署名，提供指向本许可协议的链接，同时标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。
            <br/>
            <i class="fab fa-creative-commons-by fa-fw"></i>
            <a
              href="https://creativecommons.org/licenses/by/4.0/deed.zh"
              rel="license">
              CC BY 4.0
            </a>
            （除特别声明或转载文章外）
            <br/>

compress_html: # <https://github.com/penibelst/jekyll-compress-html>
  clippings: all
  comments: [] # 注释不能压缩，否则 reveal.js 的 ppt切屏受影响
  endings: all
  ignore:
    envs: all # 暂时关掉页面压缩
  blanklines: false
  profile: false
  startings: []

# githubpage上支持的插件见<https://pages.github.com/versions/>
plugins: # <https://jekyllrb.com/docs/plugins/>
  - jekyll-default-layout # 为每个markdown自动生成layout
  - jekyll-seo-tag # 为每个页面生成标题
  - jekyll-sitemap # 为站点生成站点地图
  - jekyll-feed # 为站点生成RSS源
  - jekyll-redirect-from # 站点页面重定向
  - jekyll-remote-theme # 使用remote_theme插件实现主题的前后分离，详见<https://github.com/benbalter/jekyll-remote-theme/>

remote_theme: https://github.com/wu-kan/jekyll-theme-WuK@4.2.0 #使用固定版本号以防止主题更新导致站点显示错乱

# readme_index: # 缺失index.md和index.html时，使用README.md代替之
#   with_frontmatter: true # 支持带有yaml头的README

# webmaster_verifications: # <https://jekyll.github.io/jekyll-seo-tag/usage/>
#   google: YIKi1rBnyUaS-DMYiluseI5kZzTwjCkTFmKkSkMZDJk
#   baidu: szbTSfUGAB

permalink: pretty
# timezone: Asia/Shanghai # 解决githubpage显示时间不正确的问题，见<https://www.iana.org/time-zones>
future: true # 允许发布时间在未来的文章

# limit_posts: 999 # 限制博文数量
# encoding: utf-8

markdown: kramdown
kramdown: # 见<https://kramdown.gettalong.org/options.html>
  input: GFM # 见<http://jekyllcn.com/docs/configuration/#kramdown>
  syntax_highlighter_opts: # 可见<https://kramdown.gettalong.org/syntax_highlighter/rouge.html>
    block:
      disable: false
      line_numbers: false #渲染出来的效果好鬼畜
    span:
      disable: false
# 以下为 githubpage上不可修改的参数，见<https://help.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll>
#lsi: false # 为相关文章生成索引
#safe: true # 禁用自定义插件
#source: [your repo's top level directory] # Jekyll 读取文件的路径
#incremental: false # 增量生成
#highlighter: rouge # 代码高亮器
#gist:
#  noscript: false
#kramdown:
#  math_engine: mathjax
#  syntax_highlighter: rouge
